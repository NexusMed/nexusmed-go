// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package patients

import (
	"fmt"
	"io"
	"strconv"
)

type Consultation interface {
	IsConsultation()
}

type Address struct {
	Line1      *string `json:"line1,omitempty"`
	Line2      *string `json:"line2,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode *string `json:"postal_code,omitempty"`
	Country    *string `json:"country,omitempty"`
}

type AddressInput struct {
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode string  `json:"postal_code"`
}

type AsynchronousConsultation struct {
	ID            string          `json:"id"`
	CreatedAt     string          `json:"created_at"`
	Assignee      *Prescriber     `json:"assignee,omitempty"`
	Prescriptions []*Prescription `json:"prescriptions,omitempty"`
}

func (AsynchronousConsultation) IsConsultation() {}

type CreatePatientInput struct {
	Name        *NameInput        `json:"name,omitempty"`
	Email       *string           `json:"email,omitempty"`
	Phone       *string           `json:"phone,omitempty"`
	DateOfBirth *DateOfBirthInput `json:"date_of_birth,omitempty"`
	Address     *AddressInput     `json:"address,omitempty"`
	Sex         *SexAssignment    `json:"sex,omitempty"`
	Gender      *GenderIdentity   `json:"gender,omitempty"`
}

type DateOfBirth struct {
	Day   *int `json:"day,omitempty"`
	Month *int `json:"month,omitempty"`
	Year  *int `json:"year,omitempty"`
}

type DateOfBirthInput struct {
	Day   int `json:"day"`
	Month int `json:"month"`
	Year  int `json:"year"`
}

type Name struct {
	Title      *string `json:"title,omitempty"`
	GivenName  string  `json:"given_name"`
	FamilyName string  `json:"family_name"`
}

type NameInput struct {
	Title      *NamePrefix `json:"title,omitempty"`
	GivenName  string      `json:"given_name"`
	FamilyName string      `json:"family_name"`
}

type Patient struct {
	ID            string          `json:"id"`
	Name          *Name           `json:"name,omitempty"`
	Email         *string         `json:"email,omitempty"`
	Phone         *string         `json:"phone,omitempty"`
	CreatedAt     string          `json:"created_at"`
	DateOfBirth   *DateOfBirth    `json:"date_of_birth,omitempty"`
	Sex           *SexAssignment  `json:"sex,omitempty"`
	Gender        *GenderIdentity `json:"gender,omitempty"`
	Address       *Address        `json:"address,omitempty"`
	Consultations []Consultation  `json:"consultations,omitempty"`
	Prescriptions []*Prescription `json:"prescriptions,omitempty"`
	Stripe        *StripeCustomer `json:"stripe,omitempty"`
}

type Patients struct {
	Items     []*Patient `json:"items,omitempty"`
	NextToken *string    `json:"next_token,omitempty"`
}

type Prescriber struct {
	ID   string `json:"id"`
	Name *Name  `json:"name,omitempty"`
}

type Prescription struct {
	ID           string       `json:"id"`
	CreatedAt    string       `json:"created_at"`
	Prescriber   *Prescriber  `json:"prescriber,omitempty"`
	Consultation Consultation `json:"consultation,omitempty"`
}

type StripeCustomer struct {
	ID *string `json:"id,omitempty"`
}

type GenderIdentity string

const (
	GenderIdentityCisgender   GenderIdentity = "cisgender"
	GenderIdentityTransgender GenderIdentity = "transgender"
	GenderIdentityNonBinary   GenderIdentity = "non_binary"
	GenderIdentityOther       GenderIdentity = "other"
)

var AllGenderIdentity = []GenderIdentity{
	GenderIdentityCisgender,
	GenderIdentityTransgender,
	GenderIdentityNonBinary,
	GenderIdentityOther,
}

func (e GenderIdentity) IsValid() bool {
	switch e {
	case GenderIdentityCisgender, GenderIdentityTransgender, GenderIdentityNonBinary, GenderIdentityOther:
		return true
	}
	return false
}

func (e GenderIdentity) String() string {
	return string(e)
}

func (e *GenderIdentity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenderIdentity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenderIdentity", str)
	}
	return nil
}

func (e GenderIdentity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NamePrefix string

const (
	NamePrefixMr NamePrefix = "Mr"
	NamePrefixMs NamePrefix = "Ms"
)

var AllNamePrefix = []NamePrefix{
	NamePrefixMr,
	NamePrefixMs,
}

func (e NamePrefix) IsValid() bool {
	switch e {
	case NamePrefixMr, NamePrefixMs:
		return true
	}
	return false
}

func (e NamePrefix) String() string {
	return string(e)
}

func (e *NamePrefix) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NamePrefix(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NamePrefix", str)
	}
	return nil
}

func (e NamePrefix) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SexAssignment string

const (
	SexAssignmentMale     SexAssignment = "male"
	SexAssignmentFemale   SexAssignment = "female"
	SexAssignmentIntersex SexAssignment = "intersex"
)

var AllSexAssignment = []SexAssignment{
	SexAssignmentMale,
	SexAssignmentFemale,
	SexAssignmentIntersex,
}

func (e SexAssignment) IsValid() bool {
	switch e {
	case SexAssignmentMale, SexAssignmentFemale, SexAssignmentIntersex:
		return true
	}
	return false
}

func (e SexAssignment) String() string {
	return string(e)
}

func (e *SexAssignment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SexAssignment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SexAssignment", str)
	}
	return nil
}

func (e SexAssignment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
