// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package prescribe

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Address struct {
	Line1      *string `json:"line1,omitempty"`
	Line2      *string `json:"line2,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode *string `json:"postal_code,omitempty"`
}

type Business struct {
	Name    *string  `json:"name,omitempty"`
	Address *Address `json:"address,omitempty"`
}

type CreatePrescriptionInput struct {
	Patient    *PatientInput    `json:"patient,omitempty"`
	Prescriber *PrescriberInput `json:"prescriber,omitempty"`
	Products   []*ProductInput  `json:"products,omitempty"`
}

type Dosage struct {
	Quantity *float64    `json:"quantity,omitempty"`
	Unit     *DosageUnit `json:"unit,omitempty"`
}

type Medication struct {
	Name     *string `json:"name,omitempty"`
	Dosage   *Dosage `json:"dosage,omitempty"`
	Quantity *int    `json:"quantity,omitempty"`
}

type Name struct {
	Title      *string `json:"title,omitempty"`
	GivenName  *string `json:"given_name,omitempty"`
	FamilyName *string `json:"family_name,omitempty"`
}

type Patient struct {
	ID   string `json:"id"`
	Name *Name  `json:"name,omitempty"`
}

type PatientInput struct {
	ID string `json:"id"`
}

type Pharmacy struct {
	ID       string    `json:"id"`
	Business *Business `json:"business,omitempty"`
	Register *Register `json:"register,omitempty"`
}

type Prescriber struct {
	ID       string    `json:"id"`
	Name     *Name     `json:"name,omitempty"`
	Register *Register `json:"register,omitempty"`
}

type PrescriberInput struct {
	ID string `json:"id"`
}

type Prescription struct {
	ID             string              `json:"id"`
	Patient        *Patient            `json:"patient,omitempty"`
	Prescriber     *Prescriber         `json:"prescriber,omitempty"`
	Pharmacy       *Pharmacy           `json:"pharmacy,omitempty"`
	Products       []*Product          `json:"products,omitempty"`
	CreatedAt      *time.Time          `json:"created_at,omitempty"`
	Status         *PrescriptionStatus `json:"status,omitempty"`
	ConsultationID *string             `json:"consultation_id,omitempty"`
}

type Product struct {
	ID         string      `json:"id"`
	Name       string      `json:"name"`
	Medication *Medication `json:"medication,omitempty"`
}

type ProductInput struct {
	ID       string `json:"id"`
	Quantity int    `json:"quantity"`
}

type Register struct {
	Type  *RegisterType `json:"type,omitempty"`
	Value *string       `json:"value,omitempty"`
}

type DosageUnit string

const (
	DosageUnitMg  DosageUnit = "mg"
	DosageUnitMcg DosageUnit = "mcg"
	DosageUnitMl  DosageUnit = "ml"
	DosageUnitIu  DosageUnit = "iu"
)

var AllDosageUnit = []DosageUnit{
	DosageUnitMg,
	DosageUnitMcg,
	DosageUnitMl,
	DosageUnitIu,
}

func (e DosageUnit) IsValid() bool {
	switch e {
	case DosageUnitMg, DosageUnitMcg, DosageUnitMl, DosageUnitIu:
		return true
	}
	return false
}

func (e DosageUnit) String() string {
	return string(e)
}

func (e *DosageUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DosageUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DosageUnit", str)
	}
	return nil
}

func (e DosageUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PrescriptionStatus string

const (
	PrescriptionStatusPending    PrescriptionStatus = "pending"
	PrescriptionStatusConfirmed  PrescriptionStatus = "confirmed"
	PrescriptionStatusAssigned   PrescriptionStatus = "assigned"
	PrescriptionStatusUnassigned PrescriptionStatus = "unassigned"
	PrescriptionStatusAccepted   PrescriptionStatus = "accepted"
	PrescriptionStatusPackaged   PrescriptionStatus = "packaged"
	PrescriptionStatusCollected  PrescriptionStatus = "collected"
)

var AllPrescriptionStatus = []PrescriptionStatus{
	PrescriptionStatusPending,
	PrescriptionStatusConfirmed,
	PrescriptionStatusAssigned,
	PrescriptionStatusUnassigned,
	PrescriptionStatusAccepted,
	PrescriptionStatusPackaged,
	PrescriptionStatusCollected,
}

func (e PrescriptionStatus) IsValid() bool {
	switch e {
	case PrescriptionStatusPending, PrescriptionStatusConfirmed, PrescriptionStatusAssigned, PrescriptionStatusUnassigned, PrescriptionStatusAccepted, PrescriptionStatusPackaged, PrescriptionStatusCollected:
		return true
	}
	return false
}

func (e PrescriptionStatus) String() string {
	return string(e)
}

func (e *PrescriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrescriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrescriptionStatus", str)
	}
	return nil
}

func (e PrescriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RegisterType string

const (
	RegisterTypeGmc  RegisterType = "gmc"
	RegisterTypeGphc RegisterType = "gphc"
	RegisterTypeNmc  RegisterType = "nmc"
)

var AllRegisterType = []RegisterType{
	RegisterTypeGmc,
	RegisterTypeGphc,
	RegisterTypeNmc,
}

func (e RegisterType) IsValid() bool {
	switch e {
	case RegisterTypeGmc, RegisterTypeGphc, RegisterTypeNmc:
		return true
	}
	return false
}

func (e RegisterType) String() string {
	return string(e)
}

func (e *RegisterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RegisterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RegisterType", str)
	}
	return nil
}

func (e RegisterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
