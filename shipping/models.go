// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package shipping

import (
	"fmt"
	"io"
	"strconv"
)

type ISender interface {
	IsISender()
}

type Sender interface {
	IsSender()
}

type Address struct {
	Line1      *string `json:"line1,omitempty"`
	Line2      *string `json:"line2,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode *string `json:"postal_code,omitempty"`
}

type AddressInput struct {
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	City       string  `json:"city"`
	PostalCode string  `json:"postal_code"`
}

type CreateShipmentInput struct {
	Patient  *PatientInput   `json:"patient,omitempty"`
	Address  *AddressInput   `json:"address,omitempty"`
	Service  Service         `json:"service"`
	Products []*ProductInput `json:"products,omitempty"`
}

type Name struct {
	Title      *string `json:"title,omitempty"`
	GivenName  *string `json:"given_name,omitempty"`
	FamilyName *string `json:"family_name,omitempty"`
}

type Patient struct {
	ID    *string `json:"id,omitempty"`
	Name  *Name   `json:"name,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

type PatientInput struct {
	ID string `json:"id"`
}

type Pharmacy struct {
	ID      string   `json:"id"`
	Address *Address `json:"address,omitempty"`
}

func (Pharmacy) IsSender() {}

type Product struct {
	ID       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Quantity *int    `json:"quantity,omitempty"`
}

type ProductInput struct {
	ID       string `json:"id"`
	Quantity int    `json:"quantity"`
}

type Shipment struct {
	ID        string          `json:"id"`
	Products  []*Product      `json:"products,omitempty"`
	Patient   *Patient        `json:"patient,omitempty"`
	Address   *Address        `json:"address,omitempty"`
	Courier   *Courier        `json:"courier,omitempty"`
	Service   *Service        `json:"service,omitempty"`
	Status    *ShipmentStatus `json:"status,omitempty"`
	Sender    Sender          `json:"sender,omitempty"`
	CreatedAt *string         `json:"created_at,omitempty"`
}

type Courier string

const (
	CourierHermes    Courier = "hermes"
	CourierRoyalMail Courier = "royal_mail"
)

var AllCourier = []Courier{
	CourierHermes,
	CourierRoyalMail,
}

func (e Courier) IsValid() bool {
	switch e {
	case CourierHermes, CourierRoyalMail:
		return true
	}
	return false
}

func (e Courier) String() string {
	return string(e)
}

func (e *Courier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Courier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Courier", str)
	}
	return nil
}

func (e Courier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Service string

const (
	ServiceStandard Service = "standard"
	ServicePremium  Service = "premium"
)

var AllService = []Service{
	ServiceStandard,
	ServicePremium,
}

func (e Service) IsValid() bool {
	switch e {
	case ServiceStandard, ServicePremium:
		return true
	}
	return false
}

func (e Service) String() string {
	return string(e)
}

func (e *Service) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Service(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Service", str)
	}
	return nil
}

func (e Service) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShipmentStatus string

const (
	ShipmentStatusPending   ShipmentStatus = "pending"
	ShipmentStatusConfirmed ShipmentStatus = "confirmed"
	ShipmentStatusPrepared  ShipmentStatus = "prepared"
	ShipmentStatusCollected ShipmentStatus = "collected"
	ShipmentStatusEnRoute   ShipmentStatus = "en_route"
	ShipmentStatusDelivered ShipmentStatus = "delivered"
	ShipmentStatusReturned  ShipmentStatus = "returned"
)

var AllShipmentStatus = []ShipmentStatus{
	ShipmentStatusPending,
	ShipmentStatusConfirmed,
	ShipmentStatusPrepared,
	ShipmentStatusCollected,
	ShipmentStatusEnRoute,
	ShipmentStatusDelivered,
	ShipmentStatusReturned,
}

func (e ShipmentStatus) IsValid() bool {
	switch e {
	case ShipmentStatusPending, ShipmentStatusConfirmed, ShipmentStatusPrepared, ShipmentStatusCollected, ShipmentStatusEnRoute, ShipmentStatusDelivered, ShipmentStatusReturned:
		return true
	}
	return false
}

func (e ShipmentStatus) String() string {
	return string(e)
}

func (e *ShipmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShipmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShipmentStatus", str)
	}
	return nil
}

func (e ShipmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
