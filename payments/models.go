// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package payments

import (
	"fmt"
	"io"
	"strconv"
)

type Delivery interface {
	IsDelivery()
}

type IPayment interface {
	IsIPayment()
}

type Payment interface {
	IsPayment()
}

type PaymentIntegration interface {
	IsPaymentIntegration()
}

type Sender interface {
	IsSender()
}

type Address struct {
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode string  `json:"postal_code"`
}

type CombinedPayment struct {
	ID           string             `json:"id"`
	Amount       int                `json:"amount"`
	Currency     Currency           `json:"currency"`
	Integration  PaymentIntegration `json:"integration,omitempty"`
	Status       PaymentStatus      `json:"status"`
	Consultation *Consultation      `json:"consultation,omitempty"`
	Prescription *Prescription      `json:"prescription,omitempty"`
	Delivery     Delivery           `json:"delivery,omitempty"`
}

func (CombinedPayment) IsPayment()  {}
func (CombinedPayment) IsIPayment() {}

type Consultation struct {
	ID       string      `json:"id"`
	Assignee *Prescriber `json:"assignee,omitempty"`
}

type ConsultationInput struct {
	ID string `json:"id"`
}

type ConsultationPayment struct {
	ID           string             `json:"id"`
	Amount       int                `json:"amount"`
	Currency     Currency           `json:"currency"`
	Integration  PaymentIntegration `json:"integration,omitempty"`
	Status       PaymentStatus      `json:"status"`
	Consultation *Consultation      `json:"consultation,omitempty"`
}

func (ConsultationPayment) IsPayment()  {}
func (ConsultationPayment) IsIPayment() {}

type CreatePaymentInput struct {
	Type         PaymentType              `json:"type"`
	Integration  *PaymentIntegrationInput `json:"integration,omitempty"`
	Currency     Currency                 `json:"currency"`
	Price        int                      `json:"price"`
	Consultation *ConsultationInput       `json:"consultation,omitempty"`
	Prescription *PrescriptionInput       `json:"prescription,omitempty"`
	Delivery     *DeliveryInput           `json:"delivery,omitempty"`
}

type DeliveryAddressInput struct {
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	City       string  `json:"city"`
	PostalCode string  `json:"postal_code"`
}

type DeliveryInput struct {
	Type    DeliveryType          `json:"type"`
	Address *DeliveryAddressInput `json:"address,omitempty"`
	Service DeliveryService       `json:"service"`
}

type PaymentIntegrationInput struct {
	Type     PaymentIntegrationType    `json:"type"`
	Redirect *RedirectIntegrationInput `json:"redirect,omitempty"`
	Stripe   *StripeIntegrationInput   `json:"stripe,omitempty"`
}

type Pharmacy struct {
	ID string `json:"id"`
}

func (Pharmacy) IsSender() {}

type Prescriber struct {
	ID string `json:"id"`
}

type Prescription struct {
	ID         *string     `json:"id,omitempty"`
	Prescriber *Prescriber `json:"prescriber,omitempty"`
	Dispenser  *Pharmacy   `json:"dispenser,omitempty"`
	Products   []*Product  `json:"products,omitempty"`
}

type PrescriptionInput struct {
	ID string `json:"id"`
}

type PrescriptionPayment struct {
	ID           string             `json:"id"`
	Amount       int                `json:"amount"`
	Currency     Currency           `json:"currency"`
	Integration  PaymentIntegration `json:"integration,omitempty"`
	Status       PaymentStatus      `json:"status"`
	Prescription *Prescription      `json:"prescription,omitempty"`
	Delivery     Delivery           `json:"delivery,omitempty"`
}

func (PrescriptionPayment) IsPayment()  {}
func (PrescriptionPayment) IsIPayment() {}

type Product struct {
	ID string `json:"id"`
}

type RedirectIntegration struct {
	ID          *string `json:"id,omitempty"`
	RedirectURL string  `json:"redirect_url"`
}

func (RedirectIntegration) IsPaymentIntegration() {}

type RedirectIntegrationInput struct {
	ReturnURL  string `json:"return_url"`
	RefreshURL string `json:"refresh_url"`
}

type Shipment struct {
	ID       string           `json:"id"`
	Courier  *Courier         `json:"courier,omitempty"`
	Service  *DeliveryService `json:"service,omitempty"`
	Tracking *Tracking        `json:"tracking,omitempty"`
	Products []*Product       `json:"products,omitempty"`
	Sender   Sender           `json:"sender,omitempty"`
}

func (Shipment) IsDelivery() {}

type StripeIntegration struct {
	ID           string `json:"id"`
	ClientSecret string `json:"client_secret"`
}

func (StripeIntegration) IsPaymentIntegration() {}

type StripeIntegrationInput struct {
	PaymentMethod             *string `json:"payment_method,omitempty"`
	StatementDescriptor       *string `json:"statement_descriptor,omitempty"`
	StatementDescriptorSuffix *string `json:"statement_descriptor_suffix,omitempty"`
	ReturnURL                 *string `json:"return_url,omitempty"`
	UseStripeSdk              *bool   `json:"use_stripe_sdk,omitempty"`
}

type Tracking struct {
	ID     *string         `json:"id,omitempty"`
	Status *TrackingStatus `json:"status,omitempty"`
}

type Courier string

const (
	CourierHermes    Courier = "hermes"
	CourierRoyalMail Courier = "royal_mail"
)

var AllCourier = []Courier{
	CourierHermes,
	CourierRoyalMail,
}

func (e Courier) IsValid() bool {
	switch e {
	case CourierHermes, CourierRoyalMail:
		return true
	}
	return false
}

func (e Courier) String() string {
	return string(e)
}

func (e *Courier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Courier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Courier", str)
	}
	return nil
}

func (e Courier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Currency string

const (
	CurrencyGbp Currency = "gbp"
)

var AllCurrency = []Currency{
	CurrencyGbp,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyGbp:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryService string

const (
	DeliveryServiceStandard DeliveryService = "standard"
	DeliveryServicePremium  DeliveryService = "premium"
)

var AllDeliveryService = []DeliveryService{
	DeliveryServiceStandard,
	DeliveryServicePremium,
}

func (e DeliveryService) IsValid() bool {
	switch e {
	case DeliveryServiceStandard, DeliveryServicePremium:
		return true
	}
	return false
}

func (e DeliveryService) String() string {
	return string(e)
}

func (e *DeliveryService) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryService(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryService", str)
	}
	return nil
}

func (e DeliveryService) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryType string

const (
	DeliveryTypeMailOrder       DeliveryType = "mail_order"
	DeliveryTypeLocalCollection DeliveryType = "local_collection"
	DeliveryTypeSameDay         DeliveryType = "same_day"
)

var AllDeliveryType = []DeliveryType{
	DeliveryTypeMailOrder,
	DeliveryTypeLocalCollection,
	DeliveryTypeSameDay,
}

func (e DeliveryType) IsValid() bool {
	switch e {
	case DeliveryTypeMailOrder, DeliveryTypeLocalCollection, DeliveryTypeSameDay:
		return true
	}
	return false
}

func (e DeliveryType) String() string {
	return string(e)
}

func (e *DeliveryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryType", str)
	}
	return nil
}

func (e DeliveryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentIntegrationType string

const (
	PaymentIntegrationTypeStripe   PaymentIntegrationType = "stripe"
	PaymentIntegrationTypeRedirect PaymentIntegrationType = "redirect"
	PaymentIntegrationTypeManaged  PaymentIntegrationType = "managed"
)

var AllPaymentIntegrationType = []PaymentIntegrationType{
	PaymentIntegrationTypeStripe,
	PaymentIntegrationTypeRedirect,
	PaymentIntegrationTypeManaged,
}

func (e PaymentIntegrationType) IsValid() bool {
	switch e {
	case PaymentIntegrationTypeStripe, PaymentIntegrationTypeRedirect, PaymentIntegrationTypeManaged:
		return true
	}
	return false
}

func (e PaymentIntegrationType) String() string {
	return string(e)
}

func (e *PaymentIntegrationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentIntegrationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentIntegrationType", str)
	}
	return nil
}

func (e PaymentIntegrationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusAwaiting   PaymentStatus = "awaiting"
	PaymentStatusAuthorised PaymentStatus = "authorised"
	PaymentStatusCaptured   PaymentStatus = "captured"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusAwaiting,
	PaymentStatusAuthorised,
	PaymentStatusCaptured,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusAwaiting, PaymentStatusAuthorised, PaymentStatusCaptured:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentType string

const (
	PaymentTypeConsultationOnly PaymentType = "consultation_only"
	PaymentTypePrescriptionOnly PaymentType = "prescription_only"
	PaymentTypeCombined         PaymentType = "combined"
)

var AllPaymentType = []PaymentType{
	PaymentTypeConsultationOnly,
	PaymentTypePrescriptionOnly,
	PaymentTypeCombined,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypeConsultationOnly, PaymentTypePrescriptionOnly, PaymentTypeCombined:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrackingStatus string

const (
	TrackingStatusAwaitingCollection TrackingStatus = "awaiting_collection"
	TrackingStatusEnRoute            TrackingStatus = "en_route"
	TrackingStatusDelivered          TrackingStatus = "delivered"
	TrackingStatusReturned           TrackingStatus = "returned"
)

var AllTrackingStatus = []TrackingStatus{
	TrackingStatusAwaitingCollection,
	TrackingStatusEnRoute,
	TrackingStatusDelivered,
	TrackingStatusReturned,
}

func (e TrackingStatus) IsValid() bool {
	switch e {
	case TrackingStatusAwaitingCollection, TrackingStatusEnRoute, TrackingStatusDelivered, TrackingStatusReturned:
		return true
	}
	return false
}

func (e TrackingStatus) String() string {
	return string(e)
}

func (e *TrackingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrackingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrackingStatus", str)
	}
	return nil
}

func (e TrackingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
