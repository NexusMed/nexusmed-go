// Code generated by Nexus Automation, DO NOT EDIT.

package payments

import (
	"github.com/nexusmed/nexusmed-go/client"
)

type Client struct {
	*client.Client
}

func New() *Client {
	return &Client{client.New("/payments/graphql")}
}

func (c *Client) SetApiKey(key string) {
	c.Client.SetApiKey(key)
}

type Query struct {
	GetPayment Payment "json:\"getPayment\" graphql:\"getPayment\""
}
type Mutation struct {
	CreatePayment Payment "json:\"createPayment\" graphql:\"createPayment\""
}
type PaymentParts struct {
	ID       string        "json:\"id\" graphql:\"id\""
	Amount   int           "json:\"amount\" graphql:\"amount\""
	Currency Currency      "json:\"currency\" graphql:\"currency\""
	Status   PaymentStatus "json:\"status\" graphql:\"status\""
}
type GetPayment struct {
	GetPayment *struct {
		ID          string        "json:\"id\" graphql:\"id\""
		Amount      int           "json:\"amount\" graphql:\"amount\""
		Currency    Currency      "json:\"currency\" graphql:\"currency\""
		Status      PaymentStatus "json:\"status\" graphql:\"status\""
		Integration struct {
			Typename *string "json:\"__typename\" graphql:\"__typename\""
		} "json:\"integration\" graphql:\"integration\""
		Consultation struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"consultation\" graphql:\"consultation\""
		Prescription *struct {
			ID       *string "json:\"id\" graphql:\"id\""
			Products []*struct {
				ID string "json:\"id\" graphql:\"id\""
			} "json:\"products\" graphql:\"products\""
		} "json:\"prescription\" graphql:\"prescription\""
		Delivery struct {
			ID       string "json:\"id\" graphql:\"id\""
			Products []*struct {
				ID string "json:\"id\" graphql:\"id\""
			} "json:\"products\" graphql:\"products\""
		} "json:\"delivery\" graphql:\"delivery\""
	} "json:\"getPayment\" graphql:\"getPayment\""
}
type CreatePayment struct {
	CreatePayment *struct {
		ID          string        "json:\"id\" graphql:\"id\""
		Amount      int           "json:\"amount\" graphql:\"amount\""
		Currency    Currency      "json:\"currency\" graphql:\"currency\""
		Status      PaymentStatus "json:\"status\" graphql:\"status\""
		Integration struct {
			ClientSecret string "json:\"client_secret\" graphql:\"client_secret\""
		} "json:\"integration\" graphql:\"integration\""
		Delivery struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"delivery\" graphql:\"delivery\""
		Consultation struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"consultation\" graphql:\"consultation\""
	} "json:\"createPayment\" graphql:\"createPayment\""
}

const GetPaymentDocument = `query GetPayment ($id: ID!) {
	getPayment(id: $id) {
		... on CombinedPayment {
			... PaymentParts
			integration {
				__typename
			}
			consultation {
				id
			}
			prescription {
				id
				products {
					id
				}
			}
			delivery {
				... on Shipment {
					id
					products {
						id
					}
				}
			}
		}
	}
}
fragment PaymentParts on IPayment {
	id
	amount
	currency
	status
}
`

func (c *Client) GetPayment(id string) (*GetPayment, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetPayment
	if err := c.Client.Post("GetPayment", GetPaymentDocument, &res, vars); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreatePaymentDocument = `mutation CreatePayment ($input: CreatePaymentInput!) {
	createPayment(input: $input) {
		... on CombinedPayment {
			... PaymentParts
			integration {
				... on StripeIntegration {
					client_secret
				}
			}
			delivery {
				... on Shipment {
					id
				}
			}
			consultation {
				id
			}
		}
	}
}
fragment PaymentParts on IPayment {
	id
	amount
	currency
	status
}
`

func (c *Client) CreatePayment(input CreatePaymentInput) (*CreatePayment, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreatePayment
	if err := c.Client.Post("CreatePayment", CreatePaymentDocument, &res, vars); err != nil {
		return nil, err
	}

	return &res, nil
}
